{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["Spotfire.initialize(async (mod: Spotfire.Mod) => {\r\n    /**\r\n     * Create the read function.\r\n     */\r\n    const reader = mod.createReader(mod.visualization.data(), mod.windowSize(), mod.property(\"myProperty\"));\r\n\r\n    /**\r\n     * Store the context.\r\n     */\r\n    const context = mod.getRenderContext();\r\n\r\n    /**\r\n     * Initiate the read loop\r\n     */\r\n    reader.subscribe(render);\r\n\r\n    async function render(dataView: Spotfire.DataView, windowSize: Spotfire.Size, prop: Spotfire.ModProperty<string>) {\r\n        /**\r\n         * Check the data view for errors\r\n         */\r\n        let errors = await dataView.getErrors();\r\n        if (errors.length > 0) {\r\n            // Showing an error overlay will hide the mod iframe.\r\n            // Clear the mod content here to avoid flickering effect of\r\n            // an old configuration when next valid data view is received.\r\n            mod.controls.errorOverlay.show(errors);\r\n            return;\r\n        }\r\n        mod.controls.errorOverlay.hide();\r\n\r\n        /**\r\n         * Get the hierarchy of the categorical X-axis.\r\n         */\r\n        const xHierarchy = await dataView.hierarchy(\"X\");\r\n        if (!xHierarchy) {\r\n            mod.controls.errorOverlay.show(\"Cannot find hierarchy in data view for axis 'X'.\");\r\n            return;\r\n        }\r\n        const xRoot = await xHierarchy.root();\r\n\r\n        if (xRoot == null) {\r\n            // User interaction caused the data view to expire.\r\n            // Don't clear the mod content here to avoid flickering.\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * Print out to document\r\n         */\r\n        const container = document.querySelector(\"#mod-container\");\r\n        if (!container) {\r\n            mod.controls.errorOverlay.show(\r\n                \"Failed to find the DOM node with id #mod-container which should contain the visualization.\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        container.textContent = `windowSize: ${windowSize.width}x${windowSize.height}\\r\\n`;\r\n        container.textContent += `should render: ${xRoot.rows().length} rows\\r\\n`;\r\n        container.textContent += `${prop.name}: ${prop.value()}`;\r\n\r\n        /**\r\n         * Signal that the mod is ready for export.\r\n         */\r\n        context.signalRenderComplete();\r\n    }\r\n});\r\n"],
  "mappings": ";;;AAAA,WAAS,WAAW,OAAO,QAAsB;AAI7C,UAAM,SAAS,IAAI,aAAa,IAAI,cAAc,KAAK,GAAG,IAAI,WAAW,GAAG,IAAI,SAAS,YAAY,CAAC;AAKtG,UAAM,UAAU,IAAI,iBAAiB;AAKrC,WAAO,UAAU,MAAM;AAEvB,mBAAe,OAAO,UAA6B,YAA2B,MAAoC;AAI9G,UAAI,SAAS,MAAM,SAAS,UAAU;AACtC,UAAI,OAAO,SAAS,GAAG;AAInB,YAAI,SAAS,aAAa,KAAK,MAAM;AACrC;AAAA,MACJ;AACA,UAAI,SAAS,aAAa,KAAK;AAK/B,YAAM,aAAa,MAAM,SAAS,UAAU,GAAG;AAC/C,UAAI,CAAC,YAAY;AACb,YAAI,SAAS,aAAa,KAAK,kDAAkD;AACjF;AAAA,MACJ;AACA,YAAM,QAAQ,MAAM,WAAW,KAAK;AAEpC,UAAI,SAAS,MAAM;AAGf;AAAA,MACJ;AAKA,YAAM,YAAY,SAAS,cAAc,gBAAgB;AACzD,UAAI,CAAC,WAAW;AACZ,YAAI,SAAS,aAAa;AAAA,UACtB;AAAA,QACJ;AACA;AAAA,MACJ;AAEA,gBAAU,cAAc,eAAe,WAAW,KAAK,IAAI,WAAW,MAAM;AAAA;AAC5E,gBAAU,eAAe,kBAAkB,MAAM,KAAK,EAAE,MAAM;AAAA;AAC9D,gBAAU,eAAe,GAAG,KAAK,IAAI,KAAK,KAAK,MAAM,CAAC;AAKtD,cAAQ,qBAAqB;AAAA,IACjC;AAAA,EACJ,CAAC;",
  "names": []
}
